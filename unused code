   /*  if (this.state.employeeId == null || this.state.departmentId == null || this.state.employeeName == '' || this.state.telephoneNo == '' || this.state.email == '') {
            window.alert('One or more fields are empty! They cannot be empty! Please re-enter:');
            this.setState({
                validEmployee: false
            })
        } */
      /*  if (this.state.employeeId.length > 7) {
            window.alert('The employee id entered is too long. 7 digits or less! Please re-enter:');
            this.setState({
                validEmployee: false
            })
        } */
      /*  if (this.state.departmentId.length > 7) {
            window.alert('The department id entered is too long. 7 digits or less! Please re-enter:');
            this.setState({
                validEmployee: false
            })
        } */
         /*  if (isNaN(this.state.departmentId)) {
            window.alert('The department id you have entered is not a number. This input only accepts numeric values!');
            this.setState({
                validEmployee: false
            })
        } */

        /*employeeAdded() {
        if(!this.validateName(this.state.employeeName)){
            window.alert('Employee Name can contain only letters!');
            this.setState({
                validEmployee:false
            })
        }
   
        if (this.state.employeeName.length > 50) {
            window.alert('This name exceeds the maximum length allowed! Please re-enter:');
            this.setState({ validEmployee: false })
        }
        if (this.state.telephoneNo.length > 12) {
            window.alert('The phone number you entered is invalid! No more than 12 characters in length! Please re-enter:');
            this.setState({ validEmployee: false })
        }
        if (this.state.email.length > 30) {
            window.alert('The email you entered is invalid! No more than 30 characters in length! Please re-enter:');
            this.setState({ validEmployee: false })
        }
        if (!this.validateEmail(this.state.email)) {
            window.alert('The email you entered is not a valid email! Please re-enter:');
            this.setState({ validEmployee: false })
        }else{
            window.alert('Employee successfully added!');
            this.setState({ validEmployee: true })
        }

    } */

    /* display() {
        this.refs.departmentName.value = "";
        this.refs.employeeName.value = "";
        this.refs.telephoneNo.value = "";
        this.refs.email.value = "";
    } */

    /*onChangeText={(text) => this.validate(text)}
                           value={this.state.email}*/ 

                            //  console.log(this.state.departmentId);
      //  console.log(this.state.employeeName);
      //  console.log(this.state.telephoneNo);
      //  console.log(this.state.email);

      display() {
        this.refs.departmentName.value = "";
        this.refs.employeeName.value = "";
        this.refs.telephoneNo.value = "";
        this.refs.email.value = "";
    }

    validate = (text) => {
        console.log(text);
        let regex = /^\w+([\\.-]?\w+)*@\w+([\\.-]?\w+)*(\\.\w{2,3})+$/;
        if(regex.test(text) === this.state.email){
            console.log('Email is correct!');
            this.setState({email:text});
            return true;
        }else{
            alert('This email format is incorrect! Please re-enter:');
            this.setState({email:text});
            return false;
        }
    };

    //   console.log(localStorage.getItem('eID'));

      // validateName(name){
  //   let validString = /^[a-zA-Z ]+$/
  //   return validString.test(String(name).toString());
  // }

   // this.handleChanges = this.handleChanges.bind(this);
    // this.loginClicked = this.loginClicked.bind(this);

    // loginClicked() {
  //   if(!this.validateName(this.state.employeeName)){
  //     window.alert('Employee Name can contain only letters!');
  //     this.setState({
  //       validEmployee:false
  //     })
  //   }
  //   if (this.state.employeeName == '' || this.state.dept == '' || this.state.password == '') {
  //     // this.props.history.push(`/employee/${this.state.employeeName}/appointments`)
  //     window.alert('One or more fields are empty! They cannot be empty!');
  //     this.setState(
  //         {
  //           hasLoginFailed: true
  //         }
  //     )
  //   }
  //   if (this.state.employeeName.length > 50) {
  //     window.alert('Employee Name cannot be more than 50 characters!');
  //     this.setState(
  //         {
  //           hasLoginFailed: true
  //         }
  //     )
  //   }
  //   if (this.state.dept.length < 3 || this.state.dept.length > 40) {
  //     window.alert('Department Name must be between 3 and 40 characters in length!');
  //     this.setState(
  //         {
  //           hasLoginFailed: true
  //         }
  //     )
  //   }
  //   if (this.state.password.length < 6 || this.state.password.length > 20) {
  //     window.alert('Password must be between 6 and 20 characters in length!');
  //     this.setState(
  //         {
  //           hasLoginFailed: true
  //         }
  //     )
  //   }
  //   else {
  //     window.alert('Successful Login');
  //     this.setState(
  //         {
  //           loginSuccess: true
  //         }
  //     )
  //   }
  // }

   //this.handleChanges = this.handleChanges.bind(this);
      //this.clickButton = this.clickButton.bind(this);
      //this.addVisitor = this.addVisitor.bind(this);

      import React, {Component} from 'react'
import {Link} from 'react-router-dom'

class VisitorWelcomeComponent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      purpose: '',
      employeeId: 1,
      employeeName: '',
      visitorId: '',
      arrivalTime: '',
      items: [0],
      isLoaded: false,
    };
    this.handleChange = this.handleChange.bind(this);
    this.messageButtonClicked = this.messageButtonClicked.bind(this);
  }
  componentDidMount(query) {

    return fetch('/failte/employee/')
        .then(res => res.json())
        .then(json => {
          this.setState({
            isLoaded: true,
            items: json,
          })
        })
  }

  clickButton (){
    console.log(this.state.visitorName)
    console.log(this.state.purpose);
    console.log(this.state.employeeName);
    console.log(this.state.visitorId);
    console.log(this.state.arrivalTime);
    fetch('/failte/createappointment',{
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        purpose: this.state.purpose,
        employeeName: this.state.employeeName,
        visitorId: this.state.visitorId,
        arrivalTime: this.state.arrivalTime
      })
    })
        .then(response => response.json())
        .then(response => {
          console.log(response);

        });
    window.location = 'http://localhost:3000/appointments/';
    console.log("Appointment Added Successfully");
  }

  messageButtonClicked(){
    if(this.state.message === ''){
      window.alert('Message field must not be empty. You must state who you are and why you are here! Please re-try:');
      this.setState({
        messageFailed: true
      })
    }else if(this.state.message.length > 50){
      window.alert('The message cannot be more than 50 characters in length!');
      this.setState({
        messageFailed: true
      })
    }
    else {
      window.alert('Message sent successfully! Please wait someone will be with you shortly!');
     
      
      this.setState({
        messageSent: true,
      });
      if(this.state.messageSent === true){
        window.location = 'http://localhost:3000/message/';
        
      
      }
    }
  }

  handleChange = event => {
    this.setState({
      [event.target.name]: event.target.value
    });
    console.log(this.state);
  };

  render() {

    const {isLoaded} = this.state;

    if (!isLoaded) {
      return <div>Loading....</div>;
    } else {

    return (
        <div className='container'>
          <form>
            <div className='form-group'>
              <div className="form-group">
                <label>Reason for Visit:</label>
                <select className="form-control" name="purpose">
                  <option value="" name='purpose' disabled selected hidden>Please Choose...</option>
                  <option value="interview" name='purpose'>Interview</option>
                  <option value="delivery" name='purpose'>Delivery</option>
                  <option value="careers" name='purpose'>Careers</option>
                  <option value="maintenance" name='purpose'>Maintenance</option>
                  <option value="foodiefriday" name='purpose'>Foodie Friday</option>
                  <option value="Other" name='purpose'>Other</option>
                </select>
              </div>
              <div className="form-group">
                <label>Employee to Meet:</label><br/>
                <input  className="form-control" list="employees" name="employeeName" placeholder="Please Choose..."/>
                <datalist id="employees">
                {this.state.items.map(item => (
                  <option key={item.id} value={item.value}>{item.employeeName}</option>
                ))}
                </datalist>
              </div>
              <Link>
                <button className="btn btn-primary" onClick={this.clickButton}>Send Message</button>
              </Link>
            
            </div>
          </form>
        </div>
    );
  }
}
}

export default VisitorWelcomeComponent
